//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Resources/Input_System/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace CorruptCity.Entities.Player
{
    public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""MovementActions"",
            ""id"": ""4a356cee-493d-416b-8cde-af8563da4957"",
            ""actions"": [
                {
                    ""name"": ""HorizontalMovement"",
                    ""type"": ""Value"",
                    ""id"": ""f54f4379-7a1b-4e2b-ab70-e3abbd96639e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LookingDirection"",
                    ""type"": ""Value"",
                    ""id"": ""15944a9c-2dc4-4110-a7d5-db436207e528"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector WASD"",
                    ""id"": ""c7eb4454-3a4c-4fc8-85bd-d570e424a366"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e8848ac9-07bf-4731-b248-823eb313fc61"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""HorizontalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""54df05a3-82f6-4a81-99a9-9e4f72ca13e2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""HorizontalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""712eafe0-024b-44c8-9a03-f237772d9895"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""HorizontalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d73fbbd2-58e5-49d9-a6a9-0ad705d33ae1"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""HorizontalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector Arrows"",
                    ""id"": ""fbe2381d-4594-4514-a892-74a871a9b944"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c049b9a0-954e-442d-855f-d5ed2058f4fd"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""HorizontalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6c44e7d2-04f3-42cb-ae11-7fc7f75e8c1e"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""HorizontalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b7c1d40e-f61c-4102-a86a-58bf1dfb85b4"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""HorizontalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e43749e4-ccf7-4081-a314-defe32c62dd6"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""HorizontalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector Mouse"",
                    ""id"": ""4017f9a9-b3ce-4e03-a0f9-8667c1b797bc"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookingDirection"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""cb95acc4-0401-4d57-b922-30a98fbaa4a9"",
                    ""path"": ""<Mouse>/position/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""LookingDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0df45190-a8bb-4a66-966e-f421ec6f2bf9"",
                    ""path"": ""<Mouse>/position/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""LookingDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4a8164da-087c-4e23-a98a-1e880a2ec167"",
                    ""path"": ""<Mouse>/position/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""LookingDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1f77efdc-e6e5-4220-99e8-44911af27aee"",
                    ""path"": ""<Mouse>/position/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""LookingDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""MouseActions"",
            ""id"": ""94354c2b-1331-460f-86ed-c4cca4fd8e23"",
            ""actions"": [
                {
                    ""name"": ""Left Click"",
                    ""type"": ""Button"",
                    ""id"": ""2133e1bf-5a8f-4859-8c4b-bf5c2dd70eb9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""124db6f2-306e-43d0-b2ac-5ac45db8b031"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Left Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""KeysActions"",
            ""id"": ""5bc6f00d-eace-43b5-a3be-951a065a8e05"",
            ""actions"": [
                {
                    ""name"": ""Drive"",
                    ""type"": ""Button"",
                    ""id"": ""d4485da8-3c3a-420b-a2b3-41cda078d0a6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""38d6452f-b1e3-463f-bad8-57797cacc781"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Stop_Car"",
                    ""type"": ""Button"",
                    ""id"": ""2b3bacab-1dc4-4a66-8f8d-83a3f57fbe29"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ec4669ef-a615-4301-8e7f-e697eef831ca"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Drive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bf6717c2-33a7-4e21-bdb3-a0d2427f1b8f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b279266-839c-4dd9-b810-c8b98fa73b4d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Stop_Car"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // MovementActions
            m_MovementActions = asset.FindActionMap("MovementActions", throwIfNotFound: true);
            m_MovementActions_HorizontalMovement = m_MovementActions.FindAction("HorizontalMovement", throwIfNotFound: true);
            m_MovementActions_LookingDirection = m_MovementActions.FindAction("LookingDirection", throwIfNotFound: true);
            // MouseActions
            m_MouseActions = asset.FindActionMap("MouseActions", throwIfNotFound: true);
            m_MouseActions_LeftClick = m_MouseActions.FindAction("Left Click", throwIfNotFound: true);
            // KeysActions
            m_KeysActions = asset.FindActionMap("KeysActions", throwIfNotFound: true);
            m_KeysActions_Drive = m_KeysActions.FindAction("Drive", throwIfNotFound: true);
            m_KeysActions_Pause = m_KeysActions.FindAction("Pause", throwIfNotFound: true);
            m_KeysActions_Stop_Car = m_KeysActions.FindAction("Stop_Car", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // MovementActions
        private readonly InputActionMap m_MovementActions;
        private IMovementActionsActions m_MovementActionsActionsCallbackInterface;
        private readonly InputAction m_MovementActions_HorizontalMovement;
        private readonly InputAction m_MovementActions_LookingDirection;
        public struct MovementActionsActions
        {
            private @PlayerInputActions m_Wrapper;
            public MovementActionsActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @HorizontalMovement => m_Wrapper.m_MovementActions_HorizontalMovement;
            public InputAction @LookingDirection => m_Wrapper.m_MovementActions_LookingDirection;
            public InputActionMap Get() { return m_Wrapper.m_MovementActions; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MovementActionsActions set) { return set.Get(); }
            public void SetCallbacks(IMovementActionsActions instance)
            {
                if (m_Wrapper.m_MovementActionsActionsCallbackInterface != null)
                {
                    @HorizontalMovement.started -= m_Wrapper.m_MovementActionsActionsCallbackInterface.OnHorizontalMovement;
                    @HorizontalMovement.performed -= m_Wrapper.m_MovementActionsActionsCallbackInterface.OnHorizontalMovement;
                    @HorizontalMovement.canceled -= m_Wrapper.m_MovementActionsActionsCallbackInterface.OnHorizontalMovement;
                    @LookingDirection.started -= m_Wrapper.m_MovementActionsActionsCallbackInterface.OnLookingDirection;
                    @LookingDirection.performed -= m_Wrapper.m_MovementActionsActionsCallbackInterface.OnLookingDirection;
                    @LookingDirection.canceled -= m_Wrapper.m_MovementActionsActionsCallbackInterface.OnLookingDirection;
                }
                m_Wrapper.m_MovementActionsActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @HorizontalMovement.started += instance.OnHorizontalMovement;
                    @HorizontalMovement.performed += instance.OnHorizontalMovement;
                    @HorizontalMovement.canceled += instance.OnHorizontalMovement;
                    @LookingDirection.started += instance.OnLookingDirection;
                    @LookingDirection.performed += instance.OnLookingDirection;
                    @LookingDirection.canceled += instance.OnLookingDirection;
                }
            }
        }
        public MovementActionsActions @MovementActions => new MovementActionsActions(this);

        // MouseActions
        private readonly InputActionMap m_MouseActions;
        private IMouseActionsActions m_MouseActionsActionsCallbackInterface;
        private readonly InputAction m_MouseActions_LeftClick;
        public struct MouseActionsActions
        {
            private @PlayerInputActions m_Wrapper;
            public MouseActionsActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @LeftClick => m_Wrapper.m_MouseActions_LeftClick;
            public InputActionMap Get() { return m_Wrapper.m_MouseActions; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MouseActionsActions set) { return set.Get(); }
            public void SetCallbacks(IMouseActionsActions instance)
            {
                if (m_Wrapper.m_MouseActionsActionsCallbackInterface != null)
                {
                    @LeftClick.started -= m_Wrapper.m_MouseActionsActionsCallbackInterface.OnLeftClick;
                    @LeftClick.performed -= m_Wrapper.m_MouseActionsActionsCallbackInterface.OnLeftClick;
                    @LeftClick.canceled -= m_Wrapper.m_MouseActionsActionsCallbackInterface.OnLeftClick;
                }
                m_Wrapper.m_MouseActionsActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @LeftClick.started += instance.OnLeftClick;
                    @LeftClick.performed += instance.OnLeftClick;
                    @LeftClick.canceled += instance.OnLeftClick;
                }
            }
        }
        public MouseActionsActions @MouseActions => new MouseActionsActions(this);

        // KeysActions
        private readonly InputActionMap m_KeysActions;
        private IKeysActionsActions m_KeysActionsActionsCallbackInterface;
        private readonly InputAction m_KeysActions_Drive;
        private readonly InputAction m_KeysActions_Pause;
        private readonly InputAction m_KeysActions_Stop_Car;
        public struct KeysActionsActions
        {
            private @PlayerInputActions m_Wrapper;
            public KeysActionsActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Drive => m_Wrapper.m_KeysActions_Drive;
            public InputAction @Pause => m_Wrapper.m_KeysActions_Pause;
            public InputAction @Stop_Car => m_Wrapper.m_KeysActions_Stop_Car;
            public InputActionMap Get() { return m_Wrapper.m_KeysActions; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(KeysActionsActions set) { return set.Get(); }
            public void SetCallbacks(IKeysActionsActions instance)
            {
                if (m_Wrapper.m_KeysActionsActionsCallbackInterface != null)
                {
                    @Drive.started -= m_Wrapper.m_KeysActionsActionsCallbackInterface.OnDrive;
                    @Drive.performed -= m_Wrapper.m_KeysActionsActionsCallbackInterface.OnDrive;
                    @Drive.canceled -= m_Wrapper.m_KeysActionsActionsCallbackInterface.OnDrive;
                    @Pause.started -= m_Wrapper.m_KeysActionsActionsCallbackInterface.OnPause;
                    @Pause.performed -= m_Wrapper.m_KeysActionsActionsCallbackInterface.OnPause;
                    @Pause.canceled -= m_Wrapper.m_KeysActionsActionsCallbackInterface.OnPause;
                    @Stop_Car.started -= m_Wrapper.m_KeysActionsActionsCallbackInterface.OnStop_Car;
                    @Stop_Car.performed -= m_Wrapper.m_KeysActionsActionsCallbackInterface.OnStop_Car;
                    @Stop_Car.canceled -= m_Wrapper.m_KeysActionsActionsCallbackInterface.OnStop_Car;
                }
                m_Wrapper.m_KeysActionsActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Drive.started += instance.OnDrive;
                    @Drive.performed += instance.OnDrive;
                    @Drive.canceled += instance.OnDrive;
                    @Pause.started += instance.OnPause;
                    @Pause.performed += instance.OnPause;
                    @Pause.canceled += instance.OnPause;
                    @Stop_Car.started += instance.OnStop_Car;
                    @Stop_Car.performed += instance.OnStop_Car;
                    @Stop_Car.canceled += instance.OnStop_Car;
                }
            }
        }
        public KeysActionsActions @KeysActions => new KeysActionsActions(this);
        private int m_PCSchemeIndex = -1;
        public InputControlScheme PCScheme
        {
            get
            {
                if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
                return asset.controlSchemes[m_PCSchemeIndex];
            }
        }
        public interface IMovementActionsActions
        {
            void OnHorizontalMovement(InputAction.CallbackContext context);
            void OnLookingDirection(InputAction.CallbackContext context);
        }
        public interface IMouseActionsActions
        {
            void OnLeftClick(InputAction.CallbackContext context);
        }
        public interface IKeysActionsActions
        {
            void OnDrive(InputAction.CallbackContext context);
            void OnPause(InputAction.CallbackContext context);
            void OnStop_Car(InputAction.CallbackContext context);
        }
    }
}
